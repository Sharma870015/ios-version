{"version":3,"file":"static/js/479.5bf5f310.chunk.js","mappings":"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","sources":["components/ReminderModal.js","components/ReminderAlert.js","components/DeleteConfirmationModal.js","components/SuccessModal.js","components/TodoList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './ReminderModal.css';\n\nconst ReminderModal = ({ isOpen, onClose, onSave, onCancel }) => {\n  const [reminderDate, setReminderDate] = useState('');\n  const [reminderTime, setReminderTime] = useState('');\n\n  useEffect(() => {\n    if (isOpen) {\n      const now = new Date();\n      const currentDate = now.toISOString().split('T')[0];\n      const currentTime = now.toTimeString().split(' ')[0].slice(0, 5);\n      setReminderDate(currentDate);\n      setReminderTime(currentTime);\n    }\n  }, [isOpen]);\n\n  if (!isOpen) return null;\n\n  const handleSave = () => {\n    if (reminderDate && reminderTime) {\n      onSave(reminderDate, reminderTime);\n    } else {\n      alert('Please set both date and time');\n    }\n  };\n\n  const handleCancel = () => {\n    onCancel();\n  };\n\n  return (\n    <div className=\"modal-overlay\">\n      <div className=\"modal-content\">\n        <h2 className='set-align'>Set Reminder</h2>\n        <div className=\"form-group\">\n          <label className='for-label' htmlFor=\"reminder-date\">Date:</label>\n          <input\n            type=\"date\"\n            id=\"reminder-date\"\n            value={reminderDate}\n            onChange={(e) => setReminderDate(e.target.value)}\n          />\n        </div>\n        <div className=\"form-group\">\n          <label className='for-label' htmlFor=\"reminder-time\">Time:</label>\n          <input\n            type=\"time\"\n            id=\"reminder-time\"\n            value={reminderTime}\n            onChange={(e) => setReminderTime(e.target.value)}\n          />\n        </div>\n        <div className=\"button-group\">\n          <button className='for-Save' onClick={handleSave}>Save</button>\n          <button className='for-cancel' onClick={handleCancel}>Cancel</button>\n          <button className='for-cancel' onClick={onClose}>Close</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ReminderModal;\n","// ReminderAlert.js\nimport React from 'react';\nimport './ReminderAlert.css';\n\nconst ReminderAlert = ({ title, description, onClose }) => {\n  return (\n    <div className=\"reminder-alert-overlay\">\n      <div className=\"reminder-alert-content\">\n        <h2 className=\"reminder-alert-title\">Reminder</h2>\n        <p className=\"reminder-alert-message\">{title}</p>\n        <p className=\"reminder-alert-description\">{description}</p>\n        <button className=\"reminder-alert-button\" onClick={onClose}>\n          Close\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default ReminderAlert;\n","import React from 'react';\nimport './DeleteConfirmationModal.css';\n\nconst DeleteConfirmationModal = ({ isOpen, onClose, onConfirm }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"delete-confirmation-overlay\">\n      <div className=\"delete-confirmation-modal\">\n        <h3 className=\"delete-confirmation-title\">Delete Task</h3>\n        <p className=\"delete-confirmation-message\">Are you sure you want to delete this task?</p>\n        <div className=\"delete-confirmation-actions\">\n          <button className=\"delete-confirmation-button cancel\" onClick={onClose}>No</button>\n          <button className=\"delete-confirmation-button confirm\" onClick={onConfirm}>Yes</button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default DeleteConfirmationModal;\n","import React from 'react';\nimport './SuccessModal.css';\n\nconst SuccessModal = ({ isOpen, onClose, message }) => {\n  if (!isOpen) return null;\n\n  return (\n    <div className=\"success-modal-overlay\">\n      <div className=\"success-modal\">\n        <p>{message}</p>\n        <button onClick={onClose} className=\"close-button\">Close</button>\n      </div>\n    </div>\n  );\n};\n\nexport default SuccessModal;\n","import React, { useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTrash, faEdit } from '@fortawesome/free-solid-svg-icons';\nimport ReminderModal from './ReminderModal';\nimport ReminderAlert from './ReminderAlert';\nimport { TodosContext } from './TodosContext';\nimport { useLocation } from 'react-router-dom';\nimport DeleteConfirmationModal from './DeleteConfirmationModal';\nimport SuccessModal from './SuccessModal'; // Import SuccessModal\nimport './TodoList.css';\n\nconst TodoList = () => {\n  const { todos, setTodos, isFetched } = useContext(TodosContext);\n  const [newTitle, setNewTitle] = useState('');\n  const [newDescription, setNewDescription] = useState('');\n  const [editingTodo, setEditingTodo] = useState(null);\n  const [editingTitle, setEditingTitle] = useState('');\n  const [editingDescription, setEditingDescription] = useState('');\n  const [isReminderModalOpen, setIsReminderModalOpen] = useState(false);\n  const [selectedTodo, setSelectedTodo] = useState(null);\n  const [alertTitle, setAlertTitle] = useState('');\n  const [alertDescription, setAlertDescription] = useState('');\n  const [isAlertOpen, setIsAlertOpen] = useState(false);\n  const [error, setError] = useState('');\n  const [isDeleteModalOpen, setIsDeleteModalOpen] = useState(false);\n  const [todoToDelete, setTodoToDelete] = useState(null);\n  const [isSuccessModalOpen, setIsSuccessModalOpen] = useState(false); // Add state for success modal\n\n  const location = useLocation();\n  const username = location.state?.username || localStorage.getItem('username') || '';\n\n  useEffect(() => {\n    const savedTodos = JSON.parse(localStorage.getItem('todos')) || [];\n    setTodos(savedTodos);\n\n    if (Notification.permission === 'default') {\n      Notification.requestPermission();\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }, [todos]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      checkReminders();\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [todos]);\n\n  const handleAddTodo = () => {\n    if (!newTitle.trim() && !newDescription.trim()) {\n      setError('Please enter a title or description.');\n      return;\n    }\n\n    const currentDate = new Date().toLocaleString();\n    const newTodoItem = {\n      userId: 1,\n      id: todos.length + 1,\n      title: newTitle,\n      description: newDescription,\n      createdAt: currentDate,\n      completed: false,\n    };\n    const updatedTodos = [newTodoItem, ...todos];\n    setTodos(updatedTodos);\n    setNewTitle('');\n    setNewDescription('');\n    setSelectedTodo(newTodoItem);\n    setIsReminderModalOpen(true);\n    setError('');\n  };\n\n  const handleInputChange = (event, setter) => {\n    setter(event.target.value);\n    setError('');\n  };\n\n  const handleInputFocus = () => {\n    setError('');\n  };\n\n  const handleDeleteTodo = async (id) => {\n    try {\n      await axios.delete(`https://jsonplaceholder.typicode.com/todos/${id}`);\n      const updatedTodos = todos.filter((todo) => todo.id !== id);\n      setTodos(updatedTodos);\n    } catch (error) {\n      console.error('Error deleting todo:', error);\n    }\n    setIsDeleteModalOpen(false);\n    setTodoToDelete(null);\n  };\n\n  const handleEditTodo = (todo) => {\n    setEditingTodo(todo);\n    setEditingTitle(todo.title);\n    setEditingDescription(todo.description);\n  };\n\n  const handleUpdateTodo = async () => {\n    try {\n      const response = await axios.put(`https://jsonplaceholder.typicode.com/todos/${editingTodo.id}`, { ...editingTodo, title: editingTitle, description: editingDescription });\n      const updatedTodos = todos.map((todo) => (todo.id === editingTodo.id ? response.data : todo));\n      setTodos(sortTodosByDate(updatedTodos));\n      setEditingTodo(null);\n      setEditingTitle('');\n      setEditingDescription('');\n      setIsSuccessModalOpen(true); // Show success modal\n    } catch (error) {\n      console.error('Error updating todo:', error);\n    }\n  };\n\n  const handleSaveReminder = (date, time) => {\n    const updatedTodo = { ...selectedTodo, reminderDate: date, reminderTime: time };\n    const updatedTodos = todos.map((todo) => (todo.id === selectedTodo.id ? updatedTodo : todo));\n    setTodos(updatedTodos);\n    setIsReminderModalOpen(false);\n  };\n\n  const checkReminders = () => {\n    const currentTime = new Date();\n    todos.forEach((todo) => {\n      if (todo.reminderDate && todo.reminderTime) {\n        const reminderDateTime = new Date(`${todo.reminderDate}T${todo.reminderTime}:00`);\n        if (currentTime >= reminderDateTime) {\n          setAlertTitle(todo.title);\n          setAlertDescription(todo.description);\n          setIsAlertOpen(true);\n          const updatedTodos = todos.map((t) => {\n            if (t.id === todo.id) {\n              return { ...t, reminderDate: null, reminderTime: null };\n            }\n            return t;\n          });\n          setTodos(sortTodosByDate(updatedTodos));\n          showNotification(todo.title, todo.description);\n        }\n      }\n    });\n  };\n\n  const showNotification = (title, description) => {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then((registration) => {\n        registration.showNotification(title, {\n          body: description,\n          icon: '/path/to/icon.png',\n          badge: '/path/to/badge.png',\n        });\n      });\n    } else if (Notification.permission === 'granted') {\n      new Notification(title, { body: description });\n    } else if (Notification.permission === 'default') {\n      Notification.requestPermission().then((permission) => {\n        if (permission === 'granted') {\n          new Notification(title, { body: description });\n        }\n      });\n    }\n  };\n\n  const sortTodosByDate = (todos) => {\n    return todos.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));\n  };\n\n  const handleDeleteClick = (todo) => {\n    setIsDeleteModalOpen(true);\n    setTodoToDelete(todo);\n  };\n\n  if (!isFetched) {\n    return null;\n  }\n\n  return (\n    <div className=\"todo-list-container\">\n      <div className=\"greeting-content\">\n        <div className=\"avatar\">{username[0]?.toUpperCase() || ''}</div>\n        <div>\n          <h2 className=\"greeting\">Welcome, {username || 'User'}!</h2>\n          <p className=\"welcome-message\">Have a productive day!</p>\n        </div>\n      </div>\n\n      <div className=\"todo-list-box\">\n        {todos.length === 0 && (\n          <p className=\"no-todos-message\">Add some todos to make your project easier!</p>\n        )}\n        <div className=\"todo-header\">\n          <input\n            className=\"todo-input\"\n            type=\"text\"\n            value={newTitle}\n            onChange={(e) => handleInputChange(e, setNewTitle)}\n            onFocus={handleInputFocus}\n            placeholder=\"Enter task title\"\n          />\n          <input\n            className=\"todo-input\"\n            type=\"text\"\n            value={newDescription}\n            onChange={(e) => handleInputChange(e, setNewDescription)}\n            onFocus={handleInputFocus}\n            placeholder=\"Enter task description\"\n          />\n          {error && <div className=\"error-message\">{error}</div>}\n          <button className=\"todo-button\" onClick={handleAddTodo}>\n            Add\n          </button>\n        </div>\n        <ul className=\"todo-list\">\n          {sortTodosByDate(todos).map((todo) => (\n            <li className=\"todo-item\" key={todo.id}>\n              {editingTodo && editingTodo.id === todo.id ? (\n                <>\n                  <input\n                    className=\"for-updatelist\"\n                    placeholder=\"Edit Title\"\n                    type=\"text\"\n                    value={editingTitle}\n                    onChange={(e) => setEditingTitle(e.target.value)}\n                    onFocus={handleInputFocus}\n                  />\n                  <input\n                    className=\"for-updatedescr\"\n                    placeholder=\"Edit Description\"\n                    type=\"text\"\n                    value={editingDescription}\n                    onChange={(e) => setEditingDescription(e.target.value)}\n                    onFocus={handleInputFocus}\n                  />\n                  <button className=\"Update-btn\" onClick={handleUpdateTodo}>Update</button>\n                </>\n              ) : (\n                <>\n                  <div className=\"todo-info\">\n                    {todo.reminderDate && todo.reminderTime && (\n                      <>\n                        <span className=\"todo-day\">\n                          {new Date(todo.reminderDate).toLocaleDateString('en-US', { weekday: 'short' })}\n                        </span>\n                        <span className=\"todo-date\">\n                          {new Date(todo.reminderDate).toLocaleDateString('en-US', { day: 'numeric', month: 'short' })}\n                        </span>\n                      </>\n                    )}\n                    <div className=\"todo-text\">\n                      <span className=\"todo-title\">{todo.title}</span>\n                      <span className=\"todo-description\">{todo.description}</span>\n                    </div>\n                  </div>\n                  <div className=\"date-time\">Added on: {todo.createdAt}</div>\n                  <div className=\"todo-actions\">\n                    <FontAwesomeIcon\n                      icon={faEdit}\n                      onClick={() => handleEditTodo(todo)}\n                      className=\"icon\"\n                    />\n                    <FontAwesomeIcon\n                      icon={faTrash}\n                      onClick={() => handleDeleteClick(todo)}\n                      className=\"icon\"\n                    />\n                  </div>\n                </>\n              )}\n            </li>\n          ))}\n        </ul>\n      </div>\n      {isReminderModalOpen && (\n        <ReminderModal\n          isOpen={isReminderModalOpen}\n          onClose={() => setIsReminderModalOpen(false)}\n          onSave={handleSaveReminder}\n        />\n      )}\n      {isAlertOpen && (\n        <ReminderAlert\n          title={alertTitle}\n          description={alertDescription}\n          onClose={() => setIsAlertOpen(false)}\n        />\n      )}\n      {isDeleteModalOpen && (\n        <DeleteConfirmationModal\n          isOpen={isDeleteModalOpen}\n          onClose={() => setIsDeleteModalOpen(false)}\n          onConfirm={() => handleDeleteTodo(todoToDelete.id)}\n        />\n      )}\n      {isSuccessModalOpen && ( // Render SuccessModal\n        <SuccessModal\n          isOpen={isSuccessModalOpen}\n          onClose={() => setIsSuccessModalOpen(false)}\n          message=\"Todo updated successfully!\"\n        />\n      )}\n    </div>\n  );\n};\n\nexport default TodoList;\n"],"names":["_ref","isOpen","onClose","onSave","onCancel","reminderDate","setReminderDate","useState","reminderTime","setReminderTime","useEffect","now","Date","currentDate","toISOString","split","currentTime","toTimeString","slice","_jsx","className","children","_jsxs","htmlFor","type","id","value","onChange","e","target","onClick","handleSave","alert","handleCancel","title","description","onConfirm","message","TodoList","_location$state","_username$","todos","setTodos","isFetched","useContext","TodosContext","newTitle","setNewTitle","newDescription","setNewDescription","editingTodo","setEditingTodo","editingTitle","setEditingTitle","editingDescription","setEditingDescription","isReminderModalOpen","setIsReminderModalOpen","selectedTodo","setSelectedTodo","alertTitle","setAlertTitle","alertDescription","setAlertDescription","isAlertOpen","setIsAlertOpen","error","setError","isDeleteModalOpen","setIsDeleteModalOpen","todoToDelete","setTodoToDelete","isSuccessModalOpen","setIsSuccessModalOpen","username","useLocation","state","localStorage","getItem","savedTodos","JSON","parse","Notification","permission","requestPermission","setItem","stringify","interval","setInterval","checkReminders","clearInterval","handleInputChange","event","setter","handleInputFocus","handleUpdateTodo","async","response","axios","put","concat","updatedTodos","map","todo","data","sortTodosByDate","console","forEach","reminderDateTime","t","showNotification","navigator","serviceWorker","ready","then","registration","body","icon","badge","sort","a","b","createdAt","toUpperCase","length","onFocus","placeholder","handleAddTodo","trim","toLocaleString","newTodoItem","userId","completed","_Fragment","toLocaleDateString","weekday","day","month","FontAwesomeIcon","faEdit","handleEditTodo","faTrash","handleDeleteClick","ReminderModal","handleSaveReminder","date","time","updatedTodo","ReminderAlert","DeleteConfirmationModal","delete","filter","handleDeleteTodo","SuccessModal"],"sourceRoot":""}